{"ast":null,"code":"import { academicsService } from '../api/academicsService_enhanced';\nexport class ResultModel {\n  constructor() {\n    this.results = [];\n    this.assignedCourses = [];\n  }\n  async fetchResults(studentId) {\n    const response = await academicsService.getStudentResults(studentId);\n    this.results = response.data.results || [];\n    this.assignedCourses = response.data.assigned_courses || [];\n    return {\n      results: this.results,\n      assigned_courses: this.assignedCourses\n    };\n  }\n  async createResult(studentId, data) {\n    await academicsService.createStudentResult(studentId, data);\n    // Refetch results after creation\n    await this.fetchResults(studentId);\n  }\n  async deleteResult(resultId) {\n    await academicsService.deleteResult(resultId);\n  }\n  getResults() {\n    return this.results;\n  }\n  getAssignedCourses() {\n    return this.assignedCourses;\n  }\n  calculateGrade(obtained, total) {\n    const percentage = obtained / total * 100;\n    if (percentage >= 90) return 'A+';\n    if (percentage >= 85) return 'A';\n    if (percentage >= 80) return 'A-';\n    if (percentage >= 75) return 'B+';\n    if (percentage >= 70) return 'B';\n    if (percentage >= 65) return 'B-';\n    if (percentage >= 60) return 'C+';\n    if (percentage >= 55) return 'C';\n    if (percentage >= 50) return 'C-';\n    if (percentage >= 45) return 'D+';\n    if (percentage >= 40) return 'D';\n    return 'F';\n  }\n}","map":{"version":3,"names":["academicsService","ResultModel","constructor","results","assignedCourses","fetchResults","studentId","response","getStudentResults","data","assigned_courses","createResult","createStudentResult","deleteResult","resultId","getResults","getAssignedCourses","calculateGrade","obtained","total","percentage"],"sources":["C:/UMI/Frontend/src/models/ResultModel.ts"],"sourcesContent":["import { academicsService } from '../api/academicsService_enhanced';\r\n\r\nexport interface Result {\r\n  result_id: number;\r\n  subject: string;\r\n  exam_type: string;\r\n  exam_date: string;\r\n  total_marks: number;\r\n  obtained_marks: number;\r\n  grade: string;\r\n}\r\n\r\nexport class ResultModel {\r\n  private results: Result[] = [];\r\n  private assignedCourses: { course_id: number; name: string }[] = [];\r\n\r\n  async fetchResults(studentId: string): Promise<{ results: Result[]; assigned_courses: { course_id: number; name: string }[] }> {\r\n    const response = await academicsService.getStudentResults(studentId);\r\n    this.results = response.data.results || [];\r\n    this.assignedCourses = response.data.assigned_courses || [];\r\n    return { results: this.results, assigned_courses: this.assignedCourses };\r\n  }\r\n\r\n  async createResult(studentId: string, data: any): Promise<void> {\r\n    await academicsService.createStudentResult(studentId, data);\r\n    // Refetch results after creation\r\n    await this.fetchResults(studentId);\r\n  }\r\n\r\n  async deleteResult(resultId: number): Promise<void> {\r\n    await academicsService.deleteResult(resultId);\r\n  }\r\n\r\n  getResults(): Result[] {\r\n    return this.results;\r\n  }\r\n\r\n  getAssignedCourses(): { course_id: number; name: string }[] {\r\n    return this.assignedCourses;\r\n  }\r\n\r\n  calculateGrade(obtained: number, total: number): string {\r\n    const percentage = (obtained / total) * 100;\r\n    if (percentage >= 90) return 'A+';\r\n    if (percentage >= 85) return 'A';\r\n    if (percentage >= 80) return 'A-';\r\n    if (percentage >= 75) return 'B+';\r\n    if (percentage >= 70) return 'B';\r\n    if (percentage >= 65) return 'B-';\r\n    if (percentage >= 60) return 'C+';\r\n    if (percentage >= 55) return 'C';\r\n    if (percentage >= 50) return 'C-';\r\n    if (percentage >= 45) return 'D+';\r\n    if (percentage >= 40) return 'D';\r\n    return 'F';\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kCAAkC;AAYnE,OAAO,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KACfC,OAAO,GAAa,EAAE;IAAA,KACtBC,eAAe,GAA0C,EAAE;EAAA;EAEnE,MAAMC,YAAYA,CAACC,SAAiB,EAA2F;IAC7H,MAAMC,QAAQ,GAAG,MAAMP,gBAAgB,CAACQ,iBAAiB,CAACF,SAAS,CAAC;IACpE,IAAI,CAACH,OAAO,GAAGI,QAAQ,CAACE,IAAI,CAACN,OAAO,IAAI,EAAE;IAC1C,IAAI,CAACC,eAAe,GAAGG,QAAQ,CAACE,IAAI,CAACC,gBAAgB,IAAI,EAAE;IAC3D,OAAO;MAAEP,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEO,gBAAgB,EAAE,IAAI,CAACN;IAAgB,CAAC;EAC1E;EAEA,MAAMO,YAAYA,CAACL,SAAiB,EAAEG,IAAS,EAAiB;IAC9D,MAAMT,gBAAgB,CAACY,mBAAmB,CAACN,SAAS,EAAEG,IAAI,CAAC;IAC3D;IACA,MAAM,IAAI,CAACJ,YAAY,CAACC,SAAS,CAAC;EACpC;EAEA,MAAMO,YAAYA,CAACC,QAAgB,EAAiB;IAClD,MAAMd,gBAAgB,CAACa,YAAY,CAACC,QAAQ,CAAC;EAC/C;EAEAC,UAAUA,CAAA,EAAa;IACrB,OAAO,IAAI,CAACZ,OAAO;EACrB;EAEAa,kBAAkBA,CAAA,EAA0C;IAC1D,OAAO,IAAI,CAACZ,eAAe;EAC7B;EAEAa,cAAcA,CAACC,QAAgB,EAAEC,KAAa,EAAU;IACtD,MAAMC,UAAU,GAAIF,QAAQ,GAAGC,KAAK,GAAI,GAAG;IAC3C,IAAIC,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,GAAG;IAChC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,GAAG;IAChC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,GAAG;IAChC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,IAAI;IACjC,IAAIA,UAAU,IAAI,EAAE,EAAE,OAAO,GAAG;IAChC,OAAO,GAAG;EACZ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}