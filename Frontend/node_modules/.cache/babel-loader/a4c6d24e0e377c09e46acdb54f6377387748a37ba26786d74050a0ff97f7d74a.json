{"ast":null,"code":"import axios from'axios';const API_URL='http://127.0.0.1:8000/api/';// Create axios instance with default config\nconst apiClient=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});const register=async data=>{try{console.log('Sending registration data:',data);const response=await apiClient.post('register/registration/',data);console.log('Raw registration response:',response);// Check if we have the expected response structure\nif(response.data&&response.data.access_token&&response.data.user){// Set token for future requests\napiClient.defaults.headers.common['Authorization']=\"Token \".concat(response.data.access_token);// Return in the format expected by AuthContext\nreturn{user:response.data.user,access_token:response.data.access_token,refresh_token:response.data.refresh_token};}else{console.error('Unexpected response structure:',response.data);throw new Error('Invalid response structure from server');}}catch(error){console.error('Registration error details:',error);if(axios.isAxiosError(error)&&error.response){throw error.response.data;}throw new Error('Registration failed');}};const login=async data=>{try{console.log('Sending login data:',data);const response=await apiClient.post('register/login/',data);console.log('Raw login response:',response);if(response.data&&response.data.access_token&&response.data.user){// Set token for future requests\napiClient.defaults.headers.common['Authorization']=\"Token \".concat(response.data.access_token);// Return in the format expected by AuthContext\nreturn{user:response.data.user,access_token:response.data.access_token,refresh_token:response.data.refresh_token};}else{console.error('Unexpected login response structure:',response.data);throw new Error('Invalid response structure from server');}}catch(error){console.error('Login error details:',error);if(axios.isAxiosError(error)&&error.response){throw error.response.data;}throw new Error('Login failed');}};const logout=()=>{localStorage.removeItem('auth');// Remove auth header\ndelete apiClient.defaults.headers.common['Authorization'];};const getCurrentUser=()=>{const authStr=localStorage.getItem('auth');if(authStr){return JSON.parse(authStr);}return null;};const getProfile=async()=>{const currentUser=getCurrentUser();if(!currentUser||!currentUser.access_token){throw new Error('User not authenticated');}try{// No need to set headers manually as they're set globally after login\nconst response=await apiClient.get('profile/');return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){throw error.response.data;}throw new Error('Failed to fetch profile');}};// Setup axios interceptor for token refresh\napiClient.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;// If error is 401 and not already retrying\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{const currentUser=getCurrentUser();if(currentUser&&currentUser.refresh_token){// Try to refresh the token\nconst response=await axios.post(\"\".concat(API_URL,\"token/refresh/\"),{refresh:currentUser.refresh_token});const{access}=response.data;// Update stored auth with new access token\ncurrentUser.access_token=access;localStorage.setItem('auth',JSON.stringify(currentUser));// Update header and retry original request\napiClient.defaults.headers.common['Authorization']=\"Token \".concat(access);originalRequest.headers['Authorization']=\"Token \".concat(access);return apiClient(originalRequest);}}catch(refreshError){// If refresh fails, logout user\nlogout();window.location.href='/login';return Promise.reject(refreshError);}}return Promise.reject(error);});// Set auth header for all requests if user is logged in\nconst setupAxiosInterceptors=()=>{const currentUser=getCurrentUser();if(currentUser&&currentUser.access_token){apiClient.defaults.headers.common['Authorization']=\"Token \".concat(currentUser.access_token);}};// Call this when app initializes\nsetupAxiosInterceptors();const authService={register,login,logout,getCurrentUser,getProfile};export default authService;","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","register","data","console","log","response","post","access_token","user","defaults","common","concat","refresh_token","error","Error","isAxiosError","login","logout","localStorage","removeItem","getCurrentUser","authStr","getItem","JSON","parse","getProfile","currentUser","get","interceptors","use","_error$response","originalRequest","config","status","_retry","refresh","access","setItem","stringify","refreshError","window","location","href","Promise","reject","setupAxiosInterceptors","authService"],"sources":["c:/UMI/Frontend/src/api/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:8000/api/';\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  confirm_password: string;\n  role?: string;\n  name?: string;\n  contact?: string;\n  cnic?: string;\n}\n\ninterface LoginData {\n  username: string;\n  password: string;\n}\n\ninterface AuthResponse {\n  user: any;\n  access_token: string;\n  refresh_token: string;\n  message?: string;\n}\n\ninterface BackendResponse {\n  message: string;\n  user: any;\n  access_token: string;\n  refresh_token: string;\n}\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst register = async (data: RegisterData): Promise<AuthResponse> => {\n  try {\n    console.log('Sending registration data:', data);\n    const response = await apiClient.post<BackendResponse>('register/registration/', data);\n    \n    console.log('Raw registration response:', response);\n    \n    // Check if we have the expected response structure\n    if (response.data && response.data.access_token && response.data.user) {\n      // Set token for future requests\n      apiClient.defaults.headers.common['Authorization'] = `Token ${response.data.access_token}`;\n      \n      // Return in the format expected by AuthContext\n      return {\n        user: response.data.user,\n        access_token: response.data.access_token,\n        refresh_token: response.data.refresh_token\n      };\n    } else {\n      console.error('Unexpected response structure:', response.data);\n      throw new Error('Invalid response structure from server');\n    }\n  } catch (error) {\n    console.error('Registration error details:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Registration failed');\n  }\n};\n\nconst login = async (data: LoginData): Promise<AuthResponse> => {\n  try {\n    console.log('Sending login data:', data);\n    const response = await apiClient.post<BackendResponse>('register/login/', data);\n    \n    console.log('Raw login response:', response);\n    \n    if (response.data && response.data.access_token && response.data.user) {\n      // Set token for future requests\n      apiClient.defaults.headers.common['Authorization'] = `Token ${response.data.access_token}`;\n      \n      // Return in the format expected by AuthContext\n      return {\n        user: response.data.user,\n        access_token: response.data.access_token,\n        refresh_token: response.data.refresh_token\n      };\n    } else {\n      console.error('Unexpected login response structure:', response.data);\n      throw new Error('Invalid response structure from server');\n    }\n  } catch (error) {\n    console.error('Login error details:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Login failed');\n  }\n};\n\nconst logout = (): void => {\n  localStorage.removeItem('auth');\n  // Remove auth header\n  delete apiClient.defaults.headers.common['Authorization'];\n};\n\nconst getCurrentUser = (): AuthResponse | null => {\n  const authStr = localStorage.getItem('auth');\n  if (authStr) {\n    return JSON.parse(authStr);\n  }\n  return null;\n};\n\nconst getProfile = async (): Promise<any> => {\n  const currentUser = getCurrentUser();\n  \n  if (!currentUser || !currentUser.access_token) {\n    throw new Error('User not authenticated');\n  }\n  \n  try {\n    // No need to set headers manually as they're set globally after login\n    const response = await apiClient.get('profile/');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Failed to fetch profile');\n  }\n};\n\n// Setup axios interceptor for token refresh\napiClient.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // If error is 401 and not already retrying\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      try {\n        const currentUser = getCurrentUser();\n        \n        if (currentUser && currentUser.refresh_token) {\n          // Try to refresh the token\n          const response = await axios.post(`${API_URL}token/refresh/`, {\n            refresh: currentUser.refresh_token\n          });\n          \n          const { access } = response.data;\n          \n          // Update stored auth with new access token\n          currentUser.access_token = access;\n          localStorage.setItem('auth', JSON.stringify(currentUser));\n          \n          // Update header and retry original request\n          apiClient.defaults.headers.common['Authorization'] = `Token ${access}`;\n          originalRequest.headers['Authorization'] = `Token ${access}`;\n          \n          return apiClient(originalRequest);\n        }\n      } catch (refreshError) {\n        // If refresh fails, logout user\n        logout();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Set auth header for all requests if user is logged in\nconst setupAxiosInterceptors = (): void => {\n  const currentUser = getCurrentUser();\n  \n  if (currentUser && currentUser.access_token) {\n    apiClient.defaults.headers.common['Authorization'] = `Token ${currentUser.access_token}`;\n  }\n};\n\n// Call this when app initializes\nsetupAxiosInterceptors();\n\nconst authService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  getProfile,\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}