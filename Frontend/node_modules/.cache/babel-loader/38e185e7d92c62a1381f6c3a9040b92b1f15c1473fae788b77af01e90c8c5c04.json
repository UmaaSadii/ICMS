{"ast":null,"code":"import { api } from './api';\n\n// User Interface\n\n// Department Interface\n\n// Semester Interface\n\n// Instructor Interface\n\n// Subject Interface\n\n// Course Interface\n\n// InstructorAssignment Interface\n\n// Department Service\nexport const departmentService = {\n  // Department methods\n  getAllDepartments: () => api.get('academics/departments/'),\n  getDepartmentById: id => api.get(`academics/departments/${id}/`),\n  createDepartment: data => api.post('academics/departments/', data),\n  updateDepartment: (id, data) => api.put(`academics/departments/${id}/`, data),\n  deleteDepartment: id => api.delete(`academics/departments/${id}/`),\n  // Semester methods\n  getAllSemesters: () => api.get('academics/semesters/'),\n  getSemesterById: id => api.get(`academics/semesters/${id}/`),\n  getSemestersByDepartment: departmentId => api.get(`academics/departments/${departmentId}/semesters/`),\n  createSemester: data => api.post('academics/semesters/', data),\n  updateSemester: (id, data) => api.put(`academics/semesters/${id}/`, data),\n  deleteSemester: id => api.delete(`academics/semesters/${id}/`)\n};\n\n// Instructor Service\nexport const instructorService = {\n  // Using the correct endpoint path that matches the backend URL configuration\n  getAllInstructors: () => api.get('instructors/instructor/'),\n  getInstructorById: id => api.get(`instructors/instructor/${id}/`),\n  createInstructor: data => api.post('instructors/instructor/', data),\n  updateInstructor: (id, data) => api.put(`instructors/instructor/${id}/`, data),\n  deleteInstructor: id => api.delete(`instructors/instructor/${id}/`),\n  uploadInstructorImage: (id, imageData) => api.post(`instructors/instructor/${id}/upload-image/`, imageData),\n  getAllDepartments: () => api.get('academics/departments/')\n};\n\n// Instructor Assignment Service\nexport const instructorAssignmentService = {\n  getAllAssignments: () => api.get('instructor-assignments/'),\n  getAssignmentById: id => api.get(`instructor-assignments/${id}/`),\n  createAssignment: data => api.post('instructor-assignments/', data),\n  updateAssignment: (id, data) => api.put(`instructor-assignments/${id}/`, data),\n  deleteAssignment: id => api.delete(`instructor-assignments/${id}/`)\n};\n\n// Subject Service\nexport const subjectService = {\n  getAllSubjects: () => api.get('academics/subjects/'),\n  getSubjectById: id => api.get(`academics/subjects/${id}/`),\n  createSubject: data => api.post('academics/subjects/', data),\n  updateSubject: (id, data) => api.put(`academics/subjects/${id}/`, data),\n  deleteSubject: id => api.delete(`academics/subjects/${id}/`),\n  getSubjectsByDepartment: departmentId => api.get(`academics/departments/${departmentId}/subjects/`)\n};\n\n// Course Service\nexport const courseService = {\n  getAllCourses: () => api.get('academics/courses/'),\n  getCourseById: id => api.get(`academics/courses/${id}/`),\n  createCourse: data => api.post('academics/courses/', data),\n  updateCourse: (id, data) => api.put(`academics/courses/${id}/`, data),\n  deleteCourse: id => api.delete(`academics/courses/${id}/`),\n  getCoursesBySemester: semesterId => api.get(`academics/semesters/${semesterId}/courses/`)\n};\n\n// Student Service (for instructor use)\nexport const studentService = {\n  getStudentCourses: studentId => api.get(`students/${studentId}/courses/`)\n};","map":{"version":3,"names":["api","departmentService","getAllDepartments","get","getDepartmentById","id","createDepartment","data","post","updateDepartment","put","deleteDepartment","delete","getAllSemesters","getSemesterById","getSemestersByDepartment","departmentId","createSemester","updateSemester","deleteSemester","instructorService","getAllInstructors","getInstructorById","createInstructor","updateInstructor","deleteInstructor","uploadInstructorImage","imageData","instructorAssignmentService","getAllAssignments","getAssignmentById","createAssignment","updateAssignment","deleteAssignment","subjectService","getAllSubjects","getSubjectById","createSubject","updateSubject","deleteSubject","getSubjectsByDepartment","courseService","getAllCourses","getCourseById","createCourse","updateCourse","deleteCourse","getCoursesBySemester","semesterId","studentService","getStudentCourses","studentId"],"sources":["C:/UMI/Frontend/src/api/studentInstructorService.ts"],"sourcesContent":["import { api } from './api';\nimport { AxiosResponse } from 'axios';\n\n// User Interface\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  name?: string;\n  role: string;\n}\n\n// Department Interface\nexport interface Department {\n  id?: number;\n  name: string;\n  description: string;\n  code: string; // Required field that was missing\n}\n\n// Semester Interface\nexport interface Semester {\n  id?: number;\n  name: string;\n  semester_code: string;\n  program: string;\n  capacity: number;\n  department: number;\n}\n\n// Instructor Interface\nexport interface Instructor {\n  id?: number;\n  user?: User | number;\n  name?: string;\n  phone?: string;\n  department?: Department | number;\n  qualification?: string;\n  experience?: number;\n  joining_date?: string;\n  image?: string | null;\n  user_email?: string;\n  employee_id?: string;\n  designation?: string;\n  address?: string;\n  specialization?: string;\n  experience_years?: number;\n  hire_date?: string;\n}\n\n// Subject Interface\nexport interface Subject {\n  id?: number;\n  name: string;\n  code: string;\n  department: number;\n}\n\n// Course Interface\nexport interface Course {\n  course_id: number;\n  name: string;\n  code: string;\n  description?: string;\n  semester_details?: {\n    semester_id: number;\n    name: string;\n    semester_code: string;\n    department: {\n      department_id: number;\n      name: string;\n      code: string;\n    };\n  };\n}\n\n// InstructorAssignment Interface\nexport interface InstructorAssignment {\n  id?: number;\n  instructor: number;\n  semester: number;\n  subject: number;\n}\n\n// Department Service\nexport const departmentService = {\n  // Department methods\n  getAllDepartments: (): Promise<AxiosResponse<any>> => api.get('academics/departments/'),\n  getDepartmentById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/departments/${id}/`),\n  createDepartment: (data: Department): Promise<AxiosResponse<any>> => api.post('academics/departments/', data),\n  updateDepartment: (id: number, data: Department): Promise<AxiosResponse<any>> => api.put(`academics/departments/${id}/`, data),\n  deleteDepartment: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/departments/${id}/`),\n\n  // Semester methods\n  getAllSemesters: (): Promise<AxiosResponse<any>> => api.get('academics/semesters/'),\n  getSemesterById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/semesters/${id}/`),\n  getSemestersByDepartment: (departmentId: number): Promise<AxiosResponse<any>> => api.get(`academics/departments/${departmentId}/semesters/`),\n  createSemester: (data: any): Promise<AxiosResponse<any>> => api.post('academics/semesters/', data),\n  updateSemester: (id: number, data: any): Promise<AxiosResponse<any>> => api.put(`academics/semesters/${id}/`, data),\n  deleteSemester: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/semesters/${id}/`),\n};\n\n// Instructor Service\nexport const instructorService = {\n  // Using the correct endpoint path that matches the backend URL configuration\n  getAllInstructors: (): Promise<AxiosResponse<any>> => api.get('instructors/instructor/'),\n  getInstructorById: (id: number): Promise<AxiosResponse<any>> => api.get(`instructors/instructor/${id}/`),\n  createInstructor: (data: Instructor | FormData): Promise<AxiosResponse<any>> => api.post('instructors/instructor/', data),\n  updateInstructor: (id: number, data: Instructor | FormData): Promise<AxiosResponse<any>> => api.put(`instructors/instructor/${id}/`, data),\n  deleteInstructor: (id: number): Promise<AxiosResponse<any>> => api.delete(`instructors/instructor/${id}/`),\n  uploadInstructorImage: (id: number, imageData: FormData): Promise<AxiosResponse<any>> => api.post(`instructors/instructor/${id}/upload-image/`, imageData),\n  getAllDepartments: (): Promise<AxiosResponse<any>> => api.get('academics/departments/'),\n};\n\n// Instructor Assignment Service\nexport const instructorAssignmentService = {\n  getAllAssignments: (): Promise<AxiosResponse<any>> => api.get('instructor-assignments/'),\n  getAssignmentById: (id: number): Promise<AxiosResponse<any>> => api.get(`instructor-assignments/${id}/`),\n  createAssignment: (data: InstructorAssignment): Promise<AxiosResponse<any>> => api.post('instructor-assignments/', data),\n  updateAssignment: (id: number, data: InstructorAssignment): Promise<AxiosResponse<any>> => api.put(`instructor-assignments/${id}/`, data),\n  deleteAssignment: (id: number): Promise<AxiosResponse<any>> => api.delete(`instructor-assignments/${id}/`),\n};\n\n// Subject Service\nexport const subjectService = {\n  getAllSubjects: (): Promise<AxiosResponse<any>> => api.get('academics/subjects/'),\n  getSubjectById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/subjects/${id}/`),\n  createSubject: (data: Subject): Promise<AxiosResponse<any>> => api.post('academics/subjects/', data),\n  updateSubject: (id: number, data: Subject): Promise<AxiosResponse<any>> => api.put(`academics/subjects/${id}/`, data),\n  deleteSubject: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/subjects/${id}/`),\n  getSubjectsByDepartment: (departmentId: number): Promise<AxiosResponse<any>> => api.get(`academics/departments/${departmentId}/subjects/`),\n};\n\n// Course Service\nexport const courseService = {\n  getAllCourses: (): Promise<AxiosResponse<any>> => api.get('academics/courses/'),\n  getCourseById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/courses/${id}/`),\n  createCourse: (data: any): Promise<AxiosResponse<any>> => api.post('academics/courses/', data),\n  updateCourse: (id: number, data: any): Promise<AxiosResponse<any>> => api.put(`academics/courses/${id}/`, data),\n  deleteCourse: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/courses/${id}/`),\n  getCoursesBySemester: (semesterId: number): Promise<AxiosResponse<any>> => api.get(`academics/semesters/${semesterId}/courses/`),\n};\n\n// Student Service (for instructor use)\nexport const studentService = {\n  getStudentCourses: (studentId: number): Promise<AxiosResponse<any>> => api.get(`students/${studentId}/courses/`),\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}