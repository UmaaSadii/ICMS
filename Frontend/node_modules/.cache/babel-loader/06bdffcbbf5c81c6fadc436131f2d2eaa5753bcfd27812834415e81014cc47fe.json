{"ast":null,"code":"var _jsxFileName = \"C:\\\\UMI\\\\Frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport authService from \"../api/authService\";\n\n// Define types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within AuthProvider\");\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check for existing user session on initial load\n  useEffect(() => {\n    const storedAuth = localStorage.getItem('auth');\n    if (storedAuth) {\n      try {\n        const authData = JSON.parse(storedAuth);\n        setCurrentUser(authData.user);\n\n        // Setup axios with the stored token\n        if (authData.access_token) {\n          axios.defaults.headers.common['Authorization'] = `Token ${authData.access_token}`;\n        }\n      } catch (err) {\n        console.error('Error parsing stored auth data:', err);\n        localStorage.removeItem('auth');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.login({\n        username,\n        password\n      });\n      console.log('Login response in AuthContext:', response);\n      if (!response) {\n        throw new Error('No response received from login');\n      }\n      const authData = {\n        user: response.user,\n        access_token: response.access_token,\n        refresh_token: response.refresh_token\n      };\n      console.log('Auth data being stored from login:', authData);\n      setCurrentUser(authData.user);\n      localStorage.setItem('auth', JSON.stringify(authData));\n\n      // Set the authorization header for future requests\n      axios.defaults.headers.common['Authorization'] = `Token ${authData.access_token}`;\n\n      // Redirect based on role\n      if (authData.user.role === \"admin\" || authData.user.role === \"principal\" || authData.user.role === \"director\") {\n        navigate(\"/admin\");\n      } else if (authData.user.role === \"instructor\") {\n        navigate(\"/teacher\");\n      } else if (authData.user.role === \"staff\") {\n        navigate(\"/staff\");\n      } else if (authData.user.role === \"student\") {\n        navigate(\"/student\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(\"Invalid credentials. Please try again.\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.register(userData);\n      console.log('Registration response:', response);\n\n      // The backend returns user data inside the response object\n      if (!response.user) {\n        console.error('User data missing from response:', response);\n        throw new Error('No user data received from registration');\n      }\n      const authData = {\n        user: response.user,\n        access_token: response.access_token,\n        refresh_token: response.refresh_token\n      };\n      console.log('Auth data being stored:', authData);\n      setCurrentUser(authData.user);\n      localStorage.setItem('auth', JSON.stringify(authData));\n\n      // Set the authorization header for future requests\n      axios.defaults.headers.common['Authorization'] = `Token ${authData.access_token}`;\n\n      // Redirect based on role after successful registration\n      if (authData.user.role === \"admin\" || authData.user.role === \"principal\" || authData.user.role === \"director\") {\n        navigate(\"/admin\");\n      } else if (authData.user.role === \"staff\") {\n        navigate(\"/staff\");\n      } else if (authData.user.role === \"student\") {\n        navigate(\"/student\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n    } catch (err) {\n      var _err$response, _err$response2;\n      console.error('Registration error details:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message || err);\n      if ((_err$response2 = err.response) !== null && _err$response2 !== void 0 && _err$response2.data) {\n        // Extract error message from API response\n        const errorMessage = typeof err.response.data === 'string' ? err.response.data : Object.values(err.response.data).flat().join(', ');\n        setError(errorMessage || \"Registration failed. Please try again.\");\n      } else {\n        setError(\"Registration failed. Please try again.\");\n      }\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    // Call the authService logout method to clean up auth data\n    authService.logout();\n    navigate(\"/login\");\n  };\n\n  // Force logout function for debugging/testing\n  const forceLogout = () => {\n    console.log('Force logout called - clearing all auth data');\n    setCurrentUser(null);\n    localStorage.removeItem('auth');\n    localStorage.clear(); // Clear all localStorage\n    delete axios.defaults.headers.common['Authorization'];\n    navigate(\"/login\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      login,\n      register,\n      logout,\n      forceLogout,\n      loading,\n      error,\n      isAuthenticated: !!currentUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"tMlJjM9mmZURC3EpcFsHr0g7td8=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","useNavigate","axios","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","navigate","storedAuth","localStorage","getItem","authData","JSON","parse","user","access_token","defaults","headers","common","err","console","removeItem","login","username","password","response","log","refresh_token","setItem","stringify","role","register","userData","_err$response","_err$response2","data","message","errorMessage","Object","values","flat","join","logout","forceLogout","clear","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UMI/Frontend/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, useState, useContext, ReactNode, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport authService from \"../api/authService\";\n\n// Define types\ninterface User {\n  id: number;\n  role: \"student\" | \"staff\" | \"admin\" | \"principal\" | \"director\" | \"instructor\";\n  username: string;\n  email: string;\n  [key: string]: any;\n}\n\ninterface AuthData {\n  user: User;\n  access_token: string;\n  refresh_token: string;\n}\n\ninterface AuthContextType {\n  currentUser: User | null;\n  login: (username: string, password: string) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  logout: () => void;\n  forceLogout: () => void;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within AuthProvider\");\n  return context;\n};\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  \n  // Check for existing user session on initial load\n  useEffect(() => {\n    const storedAuth = localStorage.getItem('auth');\n    if (storedAuth) {\n      try {\n        const authData: AuthData = JSON.parse(storedAuth);\n        setCurrentUser(authData.user);\n        \n        // Setup axios with the stored token\n      if (authData.access_token) {\n        axios.defaults.headers.common['Authorization'] = `Token ${authData.access_token}`;\n      }\n    } catch (err) {\n      console.error('Error parsing stored auth data:', err);\n      localStorage.removeItem('auth');\n    }\n  }\n  setLoading(false);\n}, []);\n\nconst login = async (username: string, password: string) => {\n  try {\n    setLoading(true);\n    setError(null);\n    const response = await authService.login({ username, password });\n    \n    console.log('Login response in AuthContext:', response);\n    \n    if (!response) {\n      throw new Error('No response received from login');\n    }\n    \n    const authData: AuthData = {\n      user: response.user,\n      access_token: response.access_token,\n      refresh_token: response.refresh_token\n    };\n    \n    console.log('Auth data being stored from login:', authData);\n    \n    setCurrentUser(authData.user);\n    localStorage.setItem('auth', JSON.stringify(authData));\n    \n    // Set the authorization header for future requests\n    axios.defaults.headers.common['Authorization'] = `Token ${authData.access_token}`;\n    \n      // Redirect based on role\n      if (authData.user.role === \"admin\" || authData.user.role === \"principal\" || authData.user.role === \"director\") {\n        navigate(\"/admin\");\n      } else if (authData.user.role === \"instructor\") {\n        navigate(\"/teacher\");\n      } else if (authData.user.role === \"staff\") {\n        navigate(\"/staff\");\n      } else if (authData.user.role === \"student\") {\n        navigate(\"/student\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n  } catch (err) {\n    console.error('Login error:', err);\n    setError(\"Invalid credentials. Please try again.\");\n    throw err;\n  } finally {\n    setLoading(false);\n  }\n};\n\n  const register = async (userData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.register(userData);\n      \n      console.log('Registration response:', response);\n      \n      // The backend returns user data inside the response object\n      if (!response.user) {\n        console.error('User data missing from response:', response);\n        throw new Error('No user data received from registration');\n      }\n      \n      const authData: AuthData = {\n        user: response.user,\n        access_token: response.access_token,\n        refresh_token: response.refresh_token\n      };\n      \n      console.log('Auth data being stored:', authData);\n      \n      setCurrentUser(authData.user);\n      localStorage.setItem('auth', JSON.stringify(authData));\n      \n      // Set the authorization header for future requests\n      axios.defaults.headers.common['Authorization'] = `Token ${authData.access_token}`;\n\n      // Redirect based on role after successful registration\n      if (authData.user.role === \"admin\" || authData.user.role === \"principal\" || authData.user.role === \"director\") {\n        navigate(\"/admin\");\n      } else if (authData.user.role === \"staff\") {\n        navigate(\"/staff\");\n      } else if (authData.user.role === \"student\") {\n        navigate(\"/student\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n    } catch (err: any) {\n      console.error('Registration error details:', err.response?.data || err.message || err);\n      if (err.response?.data) {\n        // Extract error message from API response\n        const errorMessage = typeof err.response.data === 'string'\n          ? err.response.data\n          : Object.values(err.response.data).flat().join(', ');\n        setError(errorMessage || \"Registration failed. Please try again.\");\n      } else {\n        setError(\"Registration failed. Please try again.\");\n      }\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const logout = () => {\n    setCurrentUser(null);\n    // Call the authService logout method to clean up auth data\n    authService.logout();\n    navigate(\"/login\");\n  };\n\n  // Force logout function for debugging/testing\n  const forceLogout = () => {\n    console.log('Force logout called - clearing all auth data');\n    setCurrentUser(null);\n    localStorage.removeItem('auth');\n    localStorage.clear(); // Clear all localStorage\n    delete axios.defaults.headers.common['Authorization'];\n    navigate(\"/login\");\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      currentUser,\n      login,\n      register,\n      logout,\n      forceLogout,\n      loading,\n      error,\n      isAuthenticated: !!currentUser\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}