{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/api/';\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst register = async data => {\n  try {\n    console.log('Sending registration data:', data);\n    const response = await apiClient.post('register/registration/', data);\n    console.log('Raw registration response:', response);\n\n    // Check if we have the expected response structure\n    if (response.data && response.data.access_token && response.data.user) {\n      // Set token for future requests\n      apiClient.defaults.headers.common['Authorization'] = `Token ${response.data.access_token}`;\n\n      // Return in the format expected by AuthContext\n      return {\n        user: response.data.user,\n        access_token: response.data.access_token,\n        refresh_token: response.data.refresh_token\n      };\n    } else {\n      console.error('Unexpected response structure:', response.data);\n      throw new Error('Invalid response structure from server');\n    }\n  } catch (error) {\n    console.error('Registration error details:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Registration failed');\n  }\n};\nconst login = async data => {\n  try {\n    console.log('Sending login data:', data);\n    const response = await apiClient.post('register/login/', data);\n    console.log('Raw login response:', response);\n    if (response.data && response.data.access_token && response.data.user) {\n      // Set token for future requests\n      apiClient.defaults.headers.common['Authorization'] = `Token ${response.data.access_token}`;\n\n      // Return in the format expected by AuthContext\n      return {\n        user: response.data.user,\n        access_token: response.data.access_token,\n        refresh_token: response.data.refresh_token\n      };\n    } else {\n      console.error('Unexpected login response structure:', response.data);\n      throw new Error('Invalid response structure from server');\n    }\n  } catch (error) {\n    console.error('Login error details:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Login failed');\n  }\n};\nconst logout = () => {\n  localStorage.removeItem('auth');\n  // Remove auth header\n  delete apiClient.defaults.headers.common['Authorization'];\n};\nconst getCurrentUser = () => {\n  const authStr = localStorage.getItem('auth');\n  if (authStr) {\n    return JSON.parse(authStr);\n  }\n  return null;\n};\nconst getProfile = async () => {\n  const currentUser = getCurrentUser();\n  if (!currentUser || !currentUser.access_token) {\n    throw new Error('User not authenticated');\n  }\n  try {\n    // No need to set headers manually as they're set globally after login\n    const response = await apiClient.get('profile/');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Failed to fetch profile');\n  }\n};\n\n// Setup axios interceptor for token refresh\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and not already retrying\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const currentUser = getCurrentUser();\n      if (currentUser && currentUser.refresh_token) {\n        // Try to refresh the token\n        const response = await axios.post(`${API_URL}token/refresh/`, {\n          refresh: currentUser.refresh_token\n        });\n        const {\n          access\n        } = response.data;\n\n        // Update stored auth with new access token\n        currentUser.access_token = access;\n        localStorage.setItem('auth', JSON.stringify(currentUser));\n\n        // Update header and retry original request\n        apiClient.defaults.headers.common['Authorization'] = `Token ${access}`;\n        originalRequest.headers['Authorization'] = `Token ${access}`;\n        return apiClient(originalRequest);\n      }\n    } catch (refreshError) {\n      // If refresh fails, logout user\n      logout();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Set auth header for all requests if user is logged in\nconst setupAxiosInterceptors = () => {\n  const currentUser = getCurrentUser();\n  if (currentUser && currentUser.access_token) {\n    apiClient.defaults.headers.common['Authorization'] = `Token ${currentUser.access_token}`;\n  }\n};\n\n// Call this when app initializes\nsetupAxiosInterceptors();\nconst authService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  getProfile\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","register","data","console","log","response","post","access_token","user","defaults","common","refresh_token","error","Error","isAxiosError","login","logout","localStorage","removeItem","getCurrentUser","authStr","getItem","JSON","parse","getProfile","currentUser","get","interceptors","use","_error$response","originalRequest","config","status","_retry","refresh","access","setItem","stringify","refreshError","window","location","href","Promise","reject","setupAxiosInterceptors","authService"],"sources":["C:/UMI/Frontend/src/api/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://127.0.0.1:8000/api/';\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  confirm_password: string;\n  role?: string;\n  name?: string;\n  contact?: string;\n  cnic?: string;\n}\n\ninterface LoginData {\n  username: string;\n  password: string;\n}\n\ninterface AuthResponse {\n  user: any;\n  access_token: string;\n  refresh_token: string;\n  message?: string;\n}\n\ninterface BackendResponse {\n  message: string;\n  user: any;\n  access_token: string;\n  refresh_token: string;\n}\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst register = async (data: RegisterData): Promise<AuthResponse> => {\n  try {\n    console.log('Sending registration data:', data);\n    const response = await apiClient.post<BackendResponse>('register/registration/', data);\n    \n    console.log('Raw registration response:', response);\n    \n    // Check if we have the expected response structure\n    if (response.data && response.data.access_token && response.data.user) {\n      // Set token for future requests\n      apiClient.defaults.headers.common['Authorization'] = `Token ${response.data.access_token}`;\n      \n      // Return in the format expected by AuthContext\n      return {\n        user: response.data.user,\n        access_token: response.data.access_token,\n        refresh_token: response.data.refresh_token\n      };\n    } else {\n      console.error('Unexpected response structure:', response.data);\n      throw new Error('Invalid response structure from server');\n    }\n  } catch (error) {\n    console.error('Registration error details:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Registration failed');\n  }\n};\n\nconst login = async (data: LoginData): Promise<AuthResponse> => {\n  try {\n    console.log('Sending login data:', data);\n    const response = await apiClient.post<BackendResponse>('register/login/', data);\n    \n    console.log('Raw login response:', response);\n    \n    if (response.data && response.data.access_token && response.data.user) {\n      // Set token for future requests\n      apiClient.defaults.headers.common['Authorization'] = `Token ${response.data.access_token}`;\n      \n      // Return in the format expected by AuthContext\n      return {\n        user: response.data.user,\n        access_token: response.data.access_token,\n        refresh_token: response.data.refresh_token\n      };\n    } else {\n      console.error('Unexpected login response structure:', response.data);\n      throw new Error('Invalid response structure from server');\n    }\n  } catch (error) {\n    console.error('Login error details:', error);\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Login failed');\n  }\n};\n\nconst logout = (): void => {\n  localStorage.removeItem('auth');\n  // Remove auth header\n  delete apiClient.defaults.headers.common['Authorization'];\n};\n\nconst getCurrentUser = (): AuthResponse | null => {\n  const authStr = localStorage.getItem('auth');\n  if (authStr) {\n    return JSON.parse(authStr);\n  }\n  return null;\n};\n\nconst getProfile = async (): Promise<any> => {\n  const currentUser = getCurrentUser();\n  \n  if (!currentUser || !currentUser.access_token) {\n    throw new Error('User not authenticated');\n  }\n  \n  try {\n    // No need to set headers manually as they're set globally after login\n    const response = await apiClient.get('profile/');\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      throw error.response.data;\n    }\n    throw new Error('Failed to fetch profile');\n  }\n};\n\n// Setup axios interceptor for token refresh\napiClient.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // If error is 401 and not already retrying\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      try {\n        const currentUser = getCurrentUser();\n        \n        if (currentUser && currentUser.refresh_token) {\n          // Try to refresh the token\n          const response = await axios.post(`${API_URL}token/refresh/`, {\n            refresh: currentUser.refresh_token\n          });\n          \n          const { access } = response.data;\n          \n          // Update stored auth with new access token\n          currentUser.access_token = access;\n          localStorage.setItem('auth', JSON.stringify(currentUser));\n          \n          // Update header and retry original request\n          apiClient.defaults.headers.common['Authorization'] = `Token ${access}`;\n          originalRequest.headers['Authorization'] = `Token ${access}`;\n          \n          return apiClient(originalRequest);\n        }\n      } catch (refreshError) {\n        // If refresh fails, logout user\n        logout();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Set auth header for all requests if user is logged in\nconst setupAxiosInterceptors = (): void => {\n  const currentUser = getCurrentUser();\n  \n  if (currentUser && currentUser.access_token) {\n    apiClient.defaults.headers.common['Authorization'] = `Token ${currentUser.access_token}`;\n  }\n};\n\n// Call this when app initializes\nsetupAxiosInterceptors();\n\nconst authService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  getProfile,\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}