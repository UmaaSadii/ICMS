{"ast":null,"code":"var _jsxFileName = \"C:\\\\UMI\\\\Frontend\\\\src\\\\context\\\\DepartmentContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { departmentService } from '../api/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DepartmentContext = /*#__PURE__*/createContext(undefined);\nexport const DepartmentProvider = ({\n  children\n}) => {\n  _s();\n  const [departments, setDepartments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchDepartments = async () => {\n    if (departments.length > 0) return; // Avoid refetching if already loaded\n\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await departmentService.getAllDepartments();\n      setDepartments(response.data);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch departments');\n      console.error('Error fetching departments:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshDepartments = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await departmentService.getAllDepartments();\n      setDepartments(response.data);\n    } catch (err) {\n      setError(err.message || 'Failed to refresh departments');\n      console.error('Error refreshing departments:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchDepartments();\n  }, []);\n  const value = {\n    departments,\n    loading,\n    error,\n    fetchDepartments,\n    refreshDepartments\n  };\n  return /*#__PURE__*/_jsxDEV(DepartmentContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(DepartmentProvider, \"4+gV0xc2URdA0iUAh/mtciLgtBA=\");\n_c = DepartmentProvider;\nexport const useDepartment = () => {\n  _s2();\n  const context = useContext(DepartmentContext);\n  if (context === undefined) {\n    throw new Error('useDepartment must be used within a DepartmentProvider');\n  }\n  return context;\n};\n_s2(useDepartment, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DepartmentProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","departmentService","jsxDEV","_jsxDEV","DepartmentContext","undefined","DepartmentProvider","children","_s","departments","setDepartments","loading","setLoading","error","setError","fetchDepartments","length","response","getAllDepartments","data","err","message","console","refreshDepartments","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDepartment","_s2","context","Error","$RefreshReg$"],"sources":["C:/UMI/Frontend/src/context/DepartmentContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { departmentService } from '../api/apiService';\r\n\r\ninterface Department {\r\n  department_id: number;\r\n  name: string;\r\n  code: string;\r\n  description?: string;\r\n}\r\n\r\ninterface DepartmentContextType {\r\n  departments: Department[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchDepartments: () => Promise<void>;\r\n  refreshDepartments: () => Promise<void>;\r\n}\r\n\r\nconst DepartmentContext = createContext<DepartmentContextType | undefined>(undefined);\r\n\r\ninterface DepartmentProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const DepartmentProvider: React.FC<DepartmentProviderProps> = ({ children }) => {\r\n  const [departments, setDepartments] = useState<Department[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchDepartments = async () => {\r\n    if (departments.length > 0) return; // Avoid refetching if already loaded\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await departmentService.getAllDepartments();\r\n      setDepartments(response.data);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch departments');\r\n      console.error('Error fetching departments:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshDepartments = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await departmentService.getAllDepartments();\r\n      setDepartments(response.data);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to refresh departments');\r\n      console.error('Error refreshing departments:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDepartments();\r\n  }, []);\r\n\r\n  const value: DepartmentContextType = {\r\n    departments,\r\n    loading,\r\n    error,\r\n    fetchDepartments,\r\n    refreshDepartments,\r\n  };\r\n\r\n  return (\r\n    <DepartmentContext.Provider value={value}>\r\n      {children}\r\n    </DepartmentContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useDepartment = (): DepartmentContextType => {\r\n  const context = useContext(DepartmentContext);\r\n  if (context === undefined) {\r\n    throw new Error('useDepartment must be used within a DepartmentProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,iBAAiB,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiBtD,MAAMC,iBAAiB,gBAAGP,aAAa,CAAoCQ,SAAS,CAAC;AAMrF,OAAO,MAAMC,kBAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAe,EAAE,CAAC;EAChE,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAIN,WAAW,CAACO,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC;;IAEpCJ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMhB,iBAAiB,CAACiB,iBAAiB,CAAC,CAAC;MAC5DR,cAAc,CAACO,QAAQ,CAACE,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjBN,QAAQ,CAACM,GAAG,CAACC,OAAO,IAAI,6BAA6B,CAAC;MACtDC,OAAO,CAACT,KAAK,CAAC,6BAA6B,EAAEO,GAAG,CAAC;IACnD,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMW,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCX,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMhB,iBAAiB,CAACiB,iBAAiB,CAAC,CAAC;MAC5DR,cAAc,CAACO,QAAQ,CAACE,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjBN,QAAQ,CAACM,GAAG,CAACC,OAAO,IAAI,+BAA+B,CAAC;MACxDC,OAAO,CAACT,KAAK,CAAC,+BAA+B,EAAEO,GAAG,CAAC;IACrD,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACde,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,KAA4B,GAAG;IACnCf,WAAW;IACXE,OAAO;IACPE,KAAK;IACLE,gBAAgB;IAChBQ;EACF,CAAC;EAED,oBACEpB,OAAA,CAACC,iBAAiB,CAACqB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EACtCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAACrB,EAAA,CApDWF,kBAAqD;AAAAwB,EAAA,GAArDxB,kBAAqD;AAsDlE,OAAO,MAAMyB,aAAa,GAAGA,CAAA,KAA6B;EAAAC,GAAA;EACxD,MAAMC,OAAO,GAAGnC,UAAU,CAACM,iBAAiB,CAAC;EAC7C,IAAI6B,OAAO,KAAK5B,SAAS,EAAE;IACzB,MAAM,IAAI6B,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,aAAa;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}