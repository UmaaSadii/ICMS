{"ast":null,"code":"import { api } from './api';\nexport const academicsService = {\n  getDepartments: () => api.get('academics/departments/'),\n  getCourses: () => api.get('academics/courses/'),\n  getCoursesBySemester: semesterId => api.get(`academics/semesters/${semesterId}/courses/`),\n  // Attendance APIs\n  getStudentAttendance: studentId => api.get(`academics/students/${studentId}/attendance/`),\n  createStudentAttendance: (studentId, data) => api.post(`academics/students/${studentId}/attendance/`, data),\n  updateAttendance: (attendanceId, data) => api.put(`academics/attendance/${attendanceId}/`, data),\n  deleteAttendance: attendanceId => api.delete(`academics/attendance/${attendanceId}/`),\n  // Result APIs\n  getStudentResults: studentId => api.get(`academics/students/${studentId}/results/`),\n  createStudentResult: (studentId, data) => api.post(`academics/students/${studentId}/results/`, data),\n  updateResult: (resultId, data) => api.put(`academics/results/${resultId}/`, data),\n  deleteResult: resultId => api.delete(`academics/results/${resultId}/`),\n  // Fee APIs\n  getFees: filters => {\n    const params = new URLSearchParams();\n    if (filters !== null && filters !== void 0 && filters.department) params.append('department', filters.department.toString());\n    if (filters !== null && filters !== void 0 && filters.semester) params.append('semester', filters.semester.toString());\n    console.log('Fee API filters:', params.toString());\n    return api.get(`academics/fees/?${params.toString()}`);\n  },\n  getStudentFees: studentId => api.get(`academics/students/${studentId}/fees/`),\n  createStudentFee: (studentId, data) => api.post(`academics/students/${studentId}/fees/`, data),\n  updateFee: (feeId, data) => api.put(`academics/fees/${feeId}/`, data),\n  deleteFee: feeId => api.delete(`academics/fees/${feeId}/`),\n  // Student APIs\n  getStudents: filters => {\n    const params = new URLSearchParams();\n    if (filters !== null && filters !== void 0 && filters.department) params.append('department', filters.department.toString());\n    if (filters !== null && filters !== void 0 && filters.semester) params.append('semester', filters.semester.toString());\n    console.log('Student API filters:', params.toString());\n    return api.get(`students/?${params.toString()}`);\n  },\n  getStudent: studentId => api.get(`students/students/${studentId}/`),\n  // Semester APIs\n  getSemesters: () => api.get('academics/semesters/'),\n  getSemester: semesterId => api.get(`academics/semesters/${semesterId}/`),\n  getSemestersByDepartment: departmentId => api.get(`academics/departments/${departmentId}/semesters/`),\n  // Fee Structure APIs\n  getFeeStructures: () => api.get('academics/fee-structures/'),\n  createFeeStructure: data => api.post('academics/fee-structures/', data),\n  updateFeeStructure: (id, data) => api.put(`academics/fee-structures/${id}/`, data),\n  deleteFeeStructure: id => api.delete(`academics/fee-structures/${id}/`)\n\n  // Add other academic related API calls here\n};","map":{"version":3,"names":["api","academicsService","getDepartments","get","getCourses","getCoursesBySemester","semesterId","getStudentAttendance","studentId","createStudentAttendance","data","post","updateAttendance","attendanceId","put","deleteAttendance","delete","getStudentResults","createStudentResult","updateResult","resultId","deleteResult","getFees","filters","params","URLSearchParams","department","append","toString","semester","console","log","getStudentFees","createStudentFee","updateFee","feeId","deleteFee","getStudents","getStudent","getSemesters","getSemester","getSemestersByDepartment","departmentId","getFeeStructures","createFeeStructure","updateFeeStructure","id","deleteFeeStructure"],"sources":["C:/UMI/Frontend/src/api/academicsService.ts"],"sourcesContent":["import { api } from './api';\r\n\r\nexport const academicsService = {\r\n  getDepartments: () => api.get('academics/departments/'),\r\n  getCourses: () => api.get('academics/courses/'),\r\n  getCoursesBySemester: (semesterId: number) => api.get(`academics/semesters/${semesterId}/courses/`),\r\n\r\n  // Attendance APIs\r\n  getStudentAttendance: (studentId: number) => api.get(`academics/students/${studentId}/attendance/`),\r\n  createStudentAttendance: (studentId: number, data: any) => api.post(`academics/students/${studentId}/attendance/`, data),\r\n  updateAttendance: (attendanceId: number, data: any) => api.put(`academics/attendance/${attendanceId}/`, data),\r\n  deleteAttendance: (attendanceId: number) => api.delete(`academics/attendance/${attendanceId}/`),\r\n\r\n  // Result APIs\r\n  getStudentResults: (studentId: number) => api.get(`academics/students/${studentId}/results/`),\r\n  createStudentResult: (studentId: number, data: any) => api.post(`academics/students/${studentId}/results/`, data),\r\n  updateResult: (resultId: number, data: any) => api.put(`academics/results/${resultId}/`, data),\r\n  deleteResult: (resultId: number) => api.delete(`academics/results/${resultId}/`),\r\n\r\n  // Fee APIs\r\n  getFees: (filters?: { department?: number; semester?: number }) => {\r\n    const params = new URLSearchParams();\r\n    if (filters?.department) params.append('department', filters.department.toString());\r\n    if (filters?.semester) params.append('semester', filters.semester.toString());\r\n    console.log('Fee API filters:', params.toString());\r\n    return api.get(`academics/fees/?${params.toString()}`);\r\n  },\r\n  getStudentFees: (studentId: number) => api.get(`academics/students/${studentId}/fees/`),\r\n  createStudentFee: (studentId: number, data: any) => api.post(`academics/students/${studentId}/fees/`, data),\r\n  updateFee: (feeId: number, data: any) => api.put(`academics/fees/${feeId}/`, data),\r\n  deleteFee: (feeId: number) => api.delete(`academics/fees/${feeId}/`),\r\n\r\n  // Student APIs\r\n  getStudents: (filters?: { department?: number; semester?: number }) => {\r\n    const params = new URLSearchParams();\r\n    if (filters?.department) params.append('department', filters.department.toString());\r\n    if (filters?.semester) params.append('semester', filters.semester.toString());\r\n    console.log('Student API filters:', params.toString());\r\n    return api.get(`students/?${params.toString()}`);\r\n  },\r\n  getStudent: (studentId: number) => api.get(`students/students/${studentId}/`),\r\n\r\n  // Semester APIs\r\n  getSemesters: () => api.get('academics/semesters/'),\r\n  getSemester: (semesterId: number) => api.get(`academics/semesters/${semesterId}/`),\r\n  getSemestersByDepartment: (departmentId: number) => api.get(`academics/departments/${departmentId}/semesters/`),\r\n\r\n  // Fee Structure APIs\r\n  getFeeStructures: () => api.get('academics/fee-structures/'),\r\n  createFeeStructure: (data: any) => api.post('academics/fee-structures/', data),\r\n  updateFeeStructure: (id: number, data: any) => api.put(`academics/fee-structures/${id}/`, data),\r\n  deleteFeeStructure: (id: number) => api.delete(`academics/fee-structures/${id}/`),\r\n\r\n  // Add other academic related API calls here\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}