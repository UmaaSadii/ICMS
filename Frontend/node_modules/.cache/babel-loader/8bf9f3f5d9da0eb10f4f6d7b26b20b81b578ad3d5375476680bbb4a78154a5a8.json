{"ast":null,"code":"import{api}from'./api';// User Interface\n// Department Interface\n// Semester Interface\n// Instructor Interface\n// Subject Interface\n// Course Interface\n// InstructorAssignment Interface\n// Department Service\nexport const departmentService={// Department methods\ngetAllDepartments:()=>api.get('academics/departments/'),getDepartmentById:id=>api.get(\"academics/departments/\".concat(id,\"/\")),createDepartment:data=>api.post('academics/departments/',data),updateDepartment:(id,data)=>api.put(\"academics/departments/\".concat(id,\"/\"),data),deleteDepartment:id=>api.delete(\"academics/departments/\".concat(id,\"/\")),// Semester methods\ngetAllSemesters:()=>api.get('academics/semesters/'),getSemesterById:id=>api.get(\"academics/semesters/\".concat(id,\"/\")),getSemestersByDepartment:departmentId=>api.get(\"academics/departments/\".concat(departmentId,\"/semesters/\")),createSemester:data=>api.post('academics/semesters/',data),updateSemester:(id,data)=>api.put(\"academics/semesters/\".concat(id,\"/\"),data),deleteSemester:id=>api.delete(\"academics/semesters/\".concat(id,\"/\"))};// Instructor Service\nexport const instructorService={// Using the correct endpoint path that matches the backend URL configuration\ngetAllInstructors:()=>api.get('instructors/instructor/'),getInstructorById:id=>api.get(\"instructors/instructor/\".concat(id,\"/\")),createInstructor:data=>api.post('instructors/instructor/',data),updateInstructor:(id,data)=>api.put(\"instructors/instructor/\".concat(id,\"/\"),data),deleteInstructor:id=>api.delete(\"instructors/instructor/\".concat(id,\"/\")),uploadInstructorImage:(id,imageData)=>api.post(\"instructors/instructor/\".concat(id,\"/upload-image/\"),imageData),getAllDepartments:()=>api.get('academics/departments/')};// Instructor Assignment Service\nexport const instructorAssignmentService={getAllAssignments:()=>api.get('instructor-assignments/'),getAssignmentById:id=>api.get(\"instructor-assignments/\".concat(id,\"/\")),createAssignment:data=>api.post('instructor-assignments/',data),updateAssignment:(id,data)=>api.put(\"instructor-assignments/\".concat(id,\"/\"),data),deleteAssignment:id=>api.delete(\"instructor-assignments/\".concat(id,\"/\"))};// Subject Service\nexport const subjectService={getAllSubjects:()=>api.get('academics/subjects/'),getSubjectById:id=>api.get(\"academics/subjects/\".concat(id,\"/\")),createSubject:data=>api.post('academics/subjects/',data),updateSubject:(id,data)=>api.put(\"academics/subjects/\".concat(id,\"/\"),data),deleteSubject:id=>api.delete(\"academics/subjects/\".concat(id,\"/\")),getSubjectsByDepartment:departmentId=>api.get(\"academics/departments/\".concat(departmentId,\"/subjects/\"))};// Course Service\nexport const courseService={getAllCourses:()=>api.get('academics/courses/'),getCourseById:id=>api.get(\"academics/courses/\".concat(id,\"/\")),createCourse:data=>api.post('academics/courses/',data),updateCourse:(id,data)=>api.put(\"academics/courses/\".concat(id,\"/\"),data),deleteCourse:id=>api.delete(\"academics/courses/\".concat(id,\"/\")),getCoursesBySemester:semesterId=>api.get(\"academics/semesters/\".concat(semesterId,\"/courses/\"))};// Student Service (for instructor use)\nexport const studentService={getStudentCourses:studentId=>api.get(\"students/\".concat(studentId,\"/courses/\"))};","map":{"version":3,"names":["api","departmentService","getAllDepartments","get","getDepartmentById","id","concat","createDepartment","data","post","updateDepartment","put","deleteDepartment","delete","getAllSemesters","getSemesterById","getSemestersByDepartment","departmentId","createSemester","updateSemester","deleteSemester","instructorService","getAllInstructors","getInstructorById","createInstructor","updateInstructor","deleteInstructor","uploadInstructorImage","imageData","instructorAssignmentService","getAllAssignments","getAssignmentById","createAssignment","updateAssignment","deleteAssignment","subjectService","getAllSubjects","getSubjectById","createSubject","updateSubject","deleteSubject","getSubjectsByDepartment","courseService","getAllCourses","getCourseById","createCourse","updateCourse","deleteCourse","getCoursesBySemester","semesterId","studentService","getStudentCourses","studentId"],"sources":["C:/UMI/Frontend/src/api/studentInstructorService.ts"],"sourcesContent":["import { api } from './api';\nimport { AxiosResponse } from 'axios';\n\n// User Interface\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  name?: string;\n  role: string;\n}\n\n// Department Interface\nexport interface Department {\n  id?: number;\n  name: string;\n  description: string;\n  code: string; // Required field that was missing\n}\n\n// Semester Interface\nexport interface Semester {\n  id?: number;\n  name: string;\n  semester_code: string;\n  program: string;\n  capacity: number;\n  department: number;\n}\n\n// Instructor Interface\nexport interface Instructor {\n  id?: number;\n  user?: User | number;\n  name?: string;\n  phone?: string;\n  department?: Department | number;\n  qualification?: string;\n  experience?: number;\n  joining_date?: string;\n  image?: string | null;\n  user_email?: string;\n  employee_id?: string;\n  designation?: string;\n  address?: string;\n  specialization?: string;\n  experience_years?: number;\n  hire_date?: string;\n}\n\n// Subject Interface\nexport interface Subject {\n  id?: number;\n  name: string;\n  code: string;\n  department: number;\n}\n\n// Course Interface\nexport interface Course {\n  course_id: number;\n  name: string;\n  code: string;\n  description?: string;\n  semester_details?: {\n    semester_id: number;\n    name: string;\n    semester_code: string;\n    department: {\n      department_id: number;\n      name: string;\n      code: string;\n    };\n  };\n}\n\n// InstructorAssignment Interface\nexport interface InstructorAssignment {\n  id?: number;\n  instructor: number;\n  semester: number;\n  subject: number;\n}\n\n// Department Service\nexport const departmentService = {\n  // Department methods\n  getAllDepartments: (): Promise<AxiosResponse<any>> => api.get('academics/departments/'),\n  getDepartmentById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/departments/${id}/`),\n  createDepartment: (data: Department): Promise<AxiosResponse<any>> => api.post('academics/departments/', data),\n  updateDepartment: (id: number, data: Department): Promise<AxiosResponse<any>> => api.put(`academics/departments/${id}/`, data),\n  deleteDepartment: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/departments/${id}/`),\n\n  // Semester methods\n  getAllSemesters: (): Promise<AxiosResponse<any>> => api.get('academics/semesters/'),\n  getSemesterById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/semesters/${id}/`),\n  getSemestersByDepartment: (departmentId: number): Promise<AxiosResponse<any>> => api.get(`academics/departments/${departmentId}/semesters/`),\n  createSemester: (data: any): Promise<AxiosResponse<any>> => api.post('academics/semesters/', data),\n  updateSemester: (id: number, data: any): Promise<AxiosResponse<any>> => api.put(`academics/semesters/${id}/`, data),\n  deleteSemester: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/semesters/${id}/`),\n};\n\n// Instructor Service\nexport const instructorService = {\n  // Using the correct endpoint path that matches the backend URL configuration\n  getAllInstructors: (): Promise<AxiosResponse<any>> => api.get('instructors/instructor/'),\n  getInstructorById: (id: number): Promise<AxiosResponse<any>> => api.get(`instructors/instructor/${id}/`),\n  createInstructor: (data: Instructor | FormData): Promise<AxiosResponse<any>> => api.post('instructors/instructor/', data),\n  updateInstructor: (id: number, data: Instructor | FormData): Promise<AxiosResponse<any>> => api.put(`instructors/instructor/${id}/`, data),\n  deleteInstructor: (id: number): Promise<AxiosResponse<any>> => api.delete(`instructors/instructor/${id}/`),\n  uploadInstructorImage: (id: number, imageData: FormData): Promise<AxiosResponse<any>> => api.post(`instructors/instructor/${id}/upload-image/`, imageData),\n  getAllDepartments: (): Promise<AxiosResponse<any>> => api.get('academics/departments/'),\n};\n\n// Instructor Assignment Service\nexport const instructorAssignmentService = {\n  getAllAssignments: (): Promise<AxiosResponse<any>> => api.get('instructor-assignments/'),\n  getAssignmentById: (id: number): Promise<AxiosResponse<any>> => api.get(`instructor-assignments/${id}/`),\n  createAssignment: (data: InstructorAssignment): Promise<AxiosResponse<any>> => api.post('instructor-assignments/', data),\n  updateAssignment: (id: number, data: InstructorAssignment): Promise<AxiosResponse<any>> => api.put(`instructor-assignments/${id}/`, data),\n  deleteAssignment: (id: number): Promise<AxiosResponse<any>> => api.delete(`instructor-assignments/${id}/`),\n};\n\n// Subject Service\nexport const subjectService = {\n  getAllSubjects: (): Promise<AxiosResponse<any>> => api.get('academics/subjects/'),\n  getSubjectById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/subjects/${id}/`),\n  createSubject: (data: Subject): Promise<AxiosResponse<any>> => api.post('academics/subjects/', data),\n  updateSubject: (id: number, data: Subject): Promise<AxiosResponse<any>> => api.put(`academics/subjects/${id}/`, data),\n  deleteSubject: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/subjects/${id}/`),\n  getSubjectsByDepartment: (departmentId: number): Promise<AxiosResponse<any>> => api.get(`academics/departments/${departmentId}/subjects/`),\n};\n\n// Course Service\nexport const courseService = {\n  getAllCourses: (): Promise<AxiosResponse<any>> => api.get('academics/courses/'),\n  getCourseById: (id: number): Promise<AxiosResponse<any>> => api.get(`academics/courses/${id}/`),\n  createCourse: (data: any): Promise<AxiosResponse<any>> => api.post('academics/courses/', data),\n  updateCourse: (id: number, data: any): Promise<AxiosResponse<any>> => api.put(`academics/courses/${id}/`, data),\n  deleteCourse: (id: number): Promise<AxiosResponse<any>> => api.delete(`academics/courses/${id}/`),\n  getCoursesBySemester: (semesterId: number): Promise<AxiosResponse<any>> => api.get(`academics/semesters/${semesterId}/courses/`),\n};\n\n// Student Service (for instructor use)\nexport const studentService = {\n  getStudentCourses: (studentId: number): Promise<AxiosResponse<any>> => api.get(`students/${studentId}/courses/`),\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}