{"ast":null,"code":"import { api } from './api';\n\n// Messaging Service\nexport const messagingService = {\n  // Individual messaging\n  sendIndividualMessage: data => api.post('messaging/send-individual/', data),\n  // Bulk messaging (using ViewSet actions)\n  sendBulkMessage: data => api.post('messaging/messages/send_bulk/', data),\n  // Search recipients\n  searchRecipients: (query, type) => api.get(`messaging/messages/search_recipients/?q=${query}&type=${type}`),\n  // Message history with recipient filter\n  getMessageHistory: (recipientId, recipientType) => {\n    let url = 'messaging/messages/history/';\n    if (recipientId && recipientType) {\n      url += `?recipient_id=${recipientId}&recipient_type=${recipientType}`;\n    }\n    return api.get(url);\n  },\n  // Communication stats\n  getCommunicationStats: () => api.get('messaging/stats/'),\n  // Message management (ViewSets)\n  getAllMessages: () => api.get('messaging/messages/'),\n  getMessageById: id => api.get(`messaging/messages/${id}/`),\n  createMessage: data => api.post('messaging/messages/', data),\n  updateMessage: (id, data) => api.put(`messaging/messages/${id}/`, data),\n  deleteMessage: id => api.delete(`messaging/messages/${id}/`),\n  // Mark message as read\n  markAsRead: id => api.post(`messaging/messages/${id}/mark_as_read/`),\n  // Message templates\n  getAllTemplates: () => api.get('messaging/templates/'),\n  getTemplateById: id => api.get(`messaging/templates/${id}/`),\n  createTemplate: data => api.post('messaging/templates/', data),\n  updateTemplate: (id, data) => api.put(`messaging/templates/${id}/`, data),\n  deleteTemplate: id => api.delete(`messaging/templates/${id}/`),\n  // Call functionality (to be implemented)\n  initiateCall: (recipientId, recipientType) => api.post('messaging/calls/', {\n    recipient_id: recipientId,\n    recipient_type: recipientType\n  }),\n  endCall: callId => api.patch(`messaging/calls/${callId}/`, {\n    status: 'ENDED'\n  }),\n  saveCallNotes: (callId, notes) => api.patch(`messaging/calls/${callId}/`, {\n    notes\n  }),\n  getCallHistory: () => api.get('messaging/calls/')\n};","map":{"version":3,"names":["api","messagingService","sendIndividualMessage","data","post","sendBulkMessage","searchRecipients","query","type","get","getMessageHistory","recipientId","recipientType","url","getCommunicationStats","getAllMessages","getMessageById","id","createMessage","updateMessage","put","deleteMessage","delete","markAsRead","getAllTemplates","getTemplateById","createTemplate","updateTemplate","deleteTemplate","initiateCall","recipient_id","recipient_type","endCall","callId","patch","status","saveCallNotes","notes","getCallHistory"],"sources":["C:/UMI/Frontend/src/api/messagingService.ts"],"sourcesContent":["import { api } from './api';\r\n\r\n// Messaging Service\r\nexport const messagingService = {\r\n  // Individual messaging\r\n  sendIndividualMessage: (data: {\r\n    recipient_id: number;\r\n    recipient_type: 'STUDENT' | 'INSTRUCTOR';\r\n    message_type: 'SMS' | 'EMAIL' | 'CALL';\r\n    subject?: string;\r\n    body: string;\r\n  }) => api.post('messaging/send-individual/', data),\r\n\r\n  // Bulk messaging (using ViewSet actions)\r\n  sendBulkMessage: (data: {\r\n    recipient_ids: number[];\r\n    recipient_type: 'STUDENT' | 'INSTRUCTOR';\r\n    message_type: 'SMS' | 'EMAIL' | 'CALL';\r\n    subject?: string;\r\n    body: string;\r\n  }) => api.post('messaging/messages/send_bulk/', data),\r\n\r\n  // Search recipients\r\n  searchRecipients: (query: string, type: 'STUDENT' | 'INSTRUCTOR') =>\r\n    api.get(`messaging/messages/search_recipients/?q=${query}&type=${type}`),\r\n\r\n  // Message history with recipient filter\r\n  getMessageHistory: (recipientId?: number, recipientType?: 'STUDENT' | 'INSTRUCTOR') => {\r\n    let url = 'messaging/messages/history/';\r\n    if (recipientId && recipientType) {\r\n      url += `?recipient_id=${recipientId}&recipient_type=${recipientType}`;\r\n    }\r\n    return api.get(url);\r\n  },\r\n\r\n  // Communication stats\r\n  getCommunicationStats: () => api.get('messaging/stats/'),\r\n\r\n  // Message management (ViewSets)\r\n  getAllMessages: () => api.get('messaging/messages/'),\r\n  getMessageById: (id: number) => api.get(`messaging/messages/${id}/`),\r\n  createMessage: (data: any) => api.post('messaging/messages/', data),\r\n  updateMessage: (id: number, data: any) => api.put(`messaging/messages/${id}/`, data),\r\n  deleteMessage: (id: number) => api.delete(`messaging/messages/${id}/`),\r\n\r\n  // Mark message as read\r\n  markAsRead: (id: number) => api.post(`messaging/messages/${id}/mark_as_read/`),\r\n\r\n  // Message templates\r\n  getAllTemplates: () => api.get('messaging/templates/'),\r\n  getTemplateById: (id: number) => api.get(`messaging/templates/${id}/`),\r\n  createTemplate: (data: any) => api.post('messaging/templates/', data),\r\n  updateTemplate: (id: number, data: any) => api.put(`messaging/templates/${id}/`, data),\r\n  deleteTemplate: (id: number) => api.delete(`messaging/templates/${id}/`),\r\n\r\n  // Call functionality (to be implemented)\r\n  initiateCall: (recipientId: number, recipientType: 'STUDENT' | 'INSTRUCTOR') =>\r\n    api.post('messaging/calls/', { recipient_id: recipientId, recipient_type: recipientType }),\r\n\r\n  endCall: (callId: number) => api.patch(`messaging/calls/${callId}/`, { status: 'ENDED' }),\r\n\r\n  saveCallNotes: (callId: number, notes: string) =>\r\n    api.patch(`messaging/calls/${callId}/`, { notes }),\r\n\r\n  getCallHistory: () => api.get('messaging/calls/'),\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;;AAE3B;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC9B;EACAC,qBAAqB,EAAGC,IAMvB,IAAKH,GAAG,CAACI,IAAI,CAAC,4BAA4B,EAAED,IAAI,CAAC;EAElD;EACAE,eAAe,EAAGF,IAMjB,IAAKH,GAAG,CAACI,IAAI,CAAC,+BAA+B,EAAED,IAAI,CAAC;EAErD;EACAG,gBAAgB,EAAEA,CAACC,KAAa,EAAEC,IAA8B,KAC9DR,GAAG,CAACS,GAAG,CAAC,2CAA2CF,KAAK,SAASC,IAAI,EAAE,CAAC;EAE1E;EACAE,iBAAiB,EAAEA,CAACC,WAAoB,EAAEC,aAAwC,KAAK;IACrF,IAAIC,GAAG,GAAG,6BAA6B;IACvC,IAAIF,WAAW,IAAIC,aAAa,EAAE;MAChCC,GAAG,IAAI,iBAAiBF,WAAW,mBAAmBC,aAAa,EAAE;IACvE;IACA,OAAOZ,GAAG,CAACS,GAAG,CAACI,GAAG,CAAC;EACrB,CAAC;EAED;EACAC,qBAAqB,EAAEA,CAAA,KAAMd,GAAG,CAACS,GAAG,CAAC,kBAAkB,CAAC;EAExD;EACAM,cAAc,EAAEA,CAAA,KAAMf,GAAG,CAACS,GAAG,CAAC,qBAAqB,CAAC;EACpDO,cAAc,EAAGC,EAAU,IAAKjB,GAAG,CAACS,GAAG,CAAC,sBAAsBQ,EAAE,GAAG,CAAC;EACpEC,aAAa,EAAGf,IAAS,IAAKH,GAAG,CAACI,IAAI,CAAC,qBAAqB,EAAED,IAAI,CAAC;EACnEgB,aAAa,EAAEA,CAACF,EAAU,EAAEd,IAAS,KAAKH,GAAG,CAACoB,GAAG,CAAC,sBAAsBH,EAAE,GAAG,EAAEd,IAAI,CAAC;EACpFkB,aAAa,EAAGJ,EAAU,IAAKjB,GAAG,CAACsB,MAAM,CAAC,sBAAsBL,EAAE,GAAG,CAAC;EAEtE;EACAM,UAAU,EAAGN,EAAU,IAAKjB,GAAG,CAACI,IAAI,CAAC,sBAAsBa,EAAE,gBAAgB,CAAC;EAE9E;EACAO,eAAe,EAAEA,CAAA,KAAMxB,GAAG,CAACS,GAAG,CAAC,sBAAsB,CAAC;EACtDgB,eAAe,EAAGR,EAAU,IAAKjB,GAAG,CAACS,GAAG,CAAC,uBAAuBQ,EAAE,GAAG,CAAC;EACtES,cAAc,EAAGvB,IAAS,IAAKH,GAAG,CAACI,IAAI,CAAC,sBAAsB,EAAED,IAAI,CAAC;EACrEwB,cAAc,EAAEA,CAACV,EAAU,EAAEd,IAAS,KAAKH,GAAG,CAACoB,GAAG,CAAC,uBAAuBH,EAAE,GAAG,EAAEd,IAAI,CAAC;EACtFyB,cAAc,EAAGX,EAAU,IAAKjB,GAAG,CAACsB,MAAM,CAAC,uBAAuBL,EAAE,GAAG,CAAC;EAExE;EACAY,YAAY,EAAEA,CAAClB,WAAmB,EAAEC,aAAuC,KACzEZ,GAAG,CAACI,IAAI,CAAC,kBAAkB,EAAE;IAAE0B,YAAY,EAAEnB,WAAW;IAAEoB,cAAc,EAAEnB;EAAc,CAAC,CAAC;EAE5FoB,OAAO,EAAGC,MAAc,IAAKjC,GAAG,CAACkC,KAAK,CAAC,mBAAmBD,MAAM,GAAG,EAAE;IAAEE,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEzFC,aAAa,EAAEA,CAACH,MAAc,EAAEI,KAAa,KAC3CrC,GAAG,CAACkC,KAAK,CAAC,mBAAmBD,MAAM,GAAG,EAAE;IAAEI;EAAM,CAAC,CAAC;EAEpDC,cAAc,EAAEA,CAAA,KAAMtC,GAAG,CAACS,GAAG,CAAC,kBAAkB;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}