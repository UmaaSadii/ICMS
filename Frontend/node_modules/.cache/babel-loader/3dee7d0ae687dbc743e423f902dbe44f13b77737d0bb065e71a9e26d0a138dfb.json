{"ast":null,"code":"import{api}from'./api';// Messaging Service\nexport const messagingService={// Individual messaging\nsendIndividualMessage:data=>api.post('messaging/send-individual/',data),// Bulk messaging (using ViewSet actions)\nsendBulkMessage:data=>api.post('messaging/messages/send_bulk/',data),// Search recipients\nsearchRecipients:(query,type)=>api.get(\"messaging/messages/search_recipients/?q=\".concat(query,\"&type=\").concat(type)),// Message history with recipient filter\ngetMessageHistory:(recipientId,recipientType)=>{let url='messaging/messages/history/';if(recipientId&&recipientType){url+=\"?recipient_id=\".concat(recipientId,\"&recipient_type=\").concat(recipientType);}return api.get(url);},// Communication stats\ngetCommunicationStats:()=>api.get('messaging/stats/'),// Message management (ViewSets)\ngetAllMessages:()=>api.get('messaging/messages/'),getMessageById:id=>api.get(\"messaging/messages/\".concat(id,\"/\")),createMessage:data=>api.post('messaging/messages/',data),updateMessage:(id,data)=>api.put(\"messaging/messages/\".concat(id,\"/\"),data),deleteMessage:id=>api.delete(\"messaging/messages/\".concat(id,\"/\")),// Mark message as read\nmarkAsRead:id=>api.post(\"messaging/messages/\".concat(id,\"/mark_as_read/\")),// Message templates\ngetAllTemplates:()=>api.get('messaging/templates/'),getTemplateById:id=>api.get(\"messaging/templates/\".concat(id,\"/\")),createTemplate:data=>api.post('messaging/templates/',data),updateTemplate:(id,data)=>api.put(\"messaging/templates/\".concat(id,\"/\"),data),deleteTemplate:id=>api.delete(\"messaging/templates/\".concat(id,\"/\")),// Call functionality (to be implemented)\ninitiateCall:(recipientId,recipientType)=>api.post('messaging/calls/',{recipient_id:recipientId,recipient_type:recipientType}),endCall:callId=>api.patch(\"messaging/calls/\".concat(callId,\"/\"),{status:'ENDED'}),saveCallNotes:(callId,notes)=>api.patch(\"messaging/calls/\".concat(callId,\"/\"),{notes}),getCallHistory:()=>api.get('messaging/calls/')};","map":{"version":3,"names":["api","messagingService","sendIndividualMessage","data","post","sendBulkMessage","searchRecipients","query","type","get","concat","getMessageHistory","recipientId","recipientType","url","getCommunicationStats","getAllMessages","getMessageById","id","createMessage","updateMessage","put","deleteMessage","delete","markAsRead","getAllTemplates","getTemplateById","createTemplate","updateTemplate","deleteTemplate","initiateCall","recipient_id","recipient_type","endCall","callId","patch","status","saveCallNotes","notes","getCallHistory"],"sources":["c:/UMI/Frontend/src/api/messagingService.ts"],"sourcesContent":["import { api } from './api';\r\n\r\n// Messaging Service\r\nexport const messagingService = {\r\n  // Individual messaging\r\n  sendIndividualMessage: (data: {\r\n    recipient_id: number;\r\n    recipient_type: 'STUDENT' | 'INSTRUCTOR';\r\n    message_type: 'SMS' | 'EMAIL' | 'CALL';\r\n    subject?: string;\r\n    body: string;\r\n  }) => api.post('messaging/send-individual/', data),\r\n\r\n  // Bulk messaging (using ViewSet actions)\r\n  sendBulkMessage: (data: {\r\n    recipient_ids: number[];\r\n    recipient_type: 'STUDENT' | 'INSTRUCTOR';\r\n    message_type: 'SMS' | 'EMAIL' | 'CALL';\r\n    subject?: string;\r\n    body: string;\r\n  }) => api.post('messaging/messages/send_bulk/', data),\r\n\r\n  // Search recipients\r\n  searchRecipients: (query: string, type: 'STUDENT' | 'INSTRUCTOR') =>\r\n    api.get(`messaging/messages/search_recipients/?q=${query}&type=${type}`),\r\n\r\n  // Message history with recipient filter\r\n  getMessageHistory: (recipientId?: number, recipientType?: 'STUDENT' | 'INSTRUCTOR') => {\r\n    let url = 'messaging/messages/history/';\r\n    if (recipientId && recipientType) {\r\n      url += `?recipient_id=${recipientId}&recipient_type=${recipientType}`;\r\n    }\r\n    return api.get(url);\r\n  },\r\n\r\n  // Communication stats\r\n  getCommunicationStats: () => api.get('messaging/stats/'),\r\n\r\n  // Message management (ViewSets)\r\n  getAllMessages: () => api.get('messaging/messages/'),\r\n  getMessageById: (id: number) => api.get(`messaging/messages/${id}/`),\r\n  createMessage: (data: any) => api.post('messaging/messages/', data),\r\n  updateMessage: (id: number, data: any) => api.put(`messaging/messages/${id}/`, data),\r\n  deleteMessage: (id: number) => api.delete(`messaging/messages/${id}/`),\r\n\r\n  // Mark message as read\r\n  markAsRead: (id: number) => api.post(`messaging/messages/${id}/mark_as_read/`),\r\n\r\n  // Message templates\r\n  getAllTemplates: () => api.get('messaging/templates/'),\r\n  getTemplateById: (id: number) => api.get(`messaging/templates/${id}/`),\r\n  createTemplate: (data: any) => api.post('messaging/templates/', data),\r\n  updateTemplate: (id: number, data: any) => api.put(`messaging/templates/${id}/`, data),\r\n  deleteTemplate: (id: number) => api.delete(`messaging/templates/${id}/`),\r\n\r\n  // Call functionality (to be implemented)\r\n  initiateCall: (recipientId: number, recipientType: 'STUDENT' | 'INSTRUCTOR') =>\r\n    api.post('messaging/calls/', { recipient_id: recipientId, recipient_type: recipientType }),\r\n\r\n  endCall: (callId: number) => api.patch(`messaging/calls/${callId}/`, { status: 'ENDED' }),\r\n\r\n  saveCallNotes: (callId: number, notes: string) =>\r\n    api.patch(`messaging/calls/${callId}/`, { notes }),\r\n\r\n  getCallHistory: () => api.get('messaging/calls/'),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}